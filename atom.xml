<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ank_Blogging</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-11T09:18:53.204Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ank</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity 资源管理基础知识</title>
    <link href="http://example.com/2024/07/06/Unity-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2024/07/06/Unity-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2024-07-06T11:08:12.000Z</published>
    <updated>2024-07-11T09:18:53.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="各类型资源以及导入面板相关参数"><a href="#各类型资源以及导入面板相关参数" class="headerlink" title="各类型资源以及导入面板相关参数"></a>各类型资源以及导入面板相关参数</h1><p>Unity 是一款强大的跨平台游戏开发引擎，它支持多种类型的资源，这些资源可以被用于构建游戏场景、动画、交互以及音效等。以下是一些常见的 Unity 资源类型及其用途：</p><h2 id="纹理和图像-Textures-and-Images"><a href="#纹理和图像-Textures-and-Images" class="headerlink" title="纹理和图像 (Textures and Images)"></a>纹理和图像 (Textures and Images)</h2><p>包括 BMP, TIF, TGA, JPG, PNG, PSD 等格式，用于材质、UI 元素或贴图。<br>Inspector 面板:<br><img src="/../img/UnityInspector/TextureIns.png" alt="TextureIns"></p><p><strong>Texture Type</strong></p><ol><li><p><strong>Default:</strong> 这是用于所有纹理的最常用设置。此选项可用于访问大多数纹理导入属性。</p></li><li><p><strong>Normal map:</strong> 选择此选项可将颜色通道转换为适合实时法线贴图的格式。</p></li><li><p><strong>Editor GUI and Legacy GUI:</strong> 在任何 HUD 或 GUI 控件上使用纹理.</p></li><li><p><strong>Sprite(2D and UI):</strong> 在 2D 游戏中使用该纹理作为精灵.</p></li><li><p><strong>Cursor:</strong> 将纹理用作自定义游标.</p></li><li><p><strong>Cookie:</strong> 此选项可通过基本参数来设置纹理，从而将其用于场景光源的剪影.</p></li><li><p><strong>光照贴图(Light map):</strong> 允许将纹理编码为特定格式（RGBM 或 dLDR，具体取决于平台）并通过后期处理步骤对纹理数据进行处理（推拉式扩张通道）</p></li><li><p><strong>Single Channel:</strong> 纹理中只需要一个通道</p></li></ol><p>各属性解释来自<a href="https://docs.unity3d.com/cn/2021.3/Manual/TextureTypes.html#Default">unity 手册</a><br><img src="/../img/UnityInspector/DefaultUintyDoc.png" alt="Default"></p><p>子选择参考<a href="%22https://docs.unity3d.com/cn/2021.3/Manual/class-TextureImporter.html#AlphaSrc%22">unity 手册</a></p><h2 id="模型-Models"><a href="#模型-Models" class="headerlink" title="模型 (Models)"></a>模型 (Models)</h2><p>.fbx, .obj, .dae 等格式的 3D 模型，用于游戏中的物体和角色。</p><ol><li><p>Model</p><p>一个 3D 模型可表示角色、建筑物或家具。在这些情况下，Unity 从单个模型文件创建多个资源。在 Project 窗口中，主导入对象是模型<strong>预制件</strong>。通常，该模型预制件还会引用多个<strong>网格</strong>对象。<br><img src="/../img/UnityInspector/ModelIns.png" alt="ModelIns"></p><ul><li>场景 (Scene) 级别的属性，比如，是否导入光源和摄像机以及使用何种缩放因子。<br>详细参数参考<a href="https://docs.unity3d.com/cn/2021.3/Manual/FBXImporter-Model.html">unity 手册</a><br><img src="/../img/UnityInspector/ModelScene.png" alt="ModelScene"></li><li>特定于网格 (Meshes) 的属性。<br>详细参数参考<a href="https://docs.unity3d.com/cn/2021.3/Manual/FBXImporter-Model.html">unity 手册</a><br><img src="/../img/UnityInspector/ModelMesh.png" alt="ModelMesh"></li><li>几何体 (Geometry) 相关属性，用于处理拓扑、UV 和法线。<br>详细参数参考<a href="https://docs.unity3d.com/cn/2021.3/Manual/FBXImporter-Model.html">unity 手册</a><br><img src="/../img/UnityInspector/ModelGeometry.png" alt="ModelGeometry"></li></ul></li><li><p>Rig</p><p>一个骨架 (Rig)（有时称为 skeleton（骨骼框架）<em>）包含一组以层级视图排列的变形体 (deformer)，这些变形体在 3D 建模应用程序（如 Autodesk® 3ds Max® 或 Autodesk® Maya®）中创建的一个或多个模型上对网格（有时称为</em>皮肤<em>）进行动画化。对于__人形 (Humanoid)</em> 和<strong>通用 (Generic)（非人形）模型，Unity 会创建 Avatar</strong> 来使导入的骨架与 Unity 游戏对象 (GameObject) 协调。</p><table><thead><tr><th>Animation Type</th><th align="left">功能</th></tr></thead><tbody><tr><td>None</td><td align="left">没有动画</td></tr><tr><td>Legacy</td><td align="left">旧版动画</td></tr><tr><td>Generic</td><td align="left">通用模型(非人形)</td></tr><tr><td>Humanoid</td><td align="left">人形模型</td></tr></tbody></table><p><a href="https://docs.unity3d.com/cn/2021.3/Manual/FBXImporter-Rig.html">参考手册</a></p></li><li><p>Animation</p><p>可以定义一组帧上发生的任何不同姿势（例如行走、奔跑甚至空闲状态（从一只脚移动到另一只脚））的序列作为动画剪辑。可以对任何具有相同骨架的模型重用剪辑。通常，单个文件包含多个不同的动作，可将每个动作定义为特定的<strong>动画剪辑</strong>。<a href="https://docs.unity3d.com/cn/2021.3/Manual/class-AnimationClip.html">参数详解</a></p></li><li><p>Materials</p><p>可以提取材质和纹理或将它们嵌入模型中。还可以调整材质在模型中的贴图方式。</p></li></ol><h2 id="音频-Audio"><a href="#音频-Audio" class="headerlink" title="音频 (Audio)"></a>音频 (Audio)</h2><p>包括 WAV, MP3, OGG 等格式的声音文件，用于背景音乐和音效。<br><a href="https://docs.unity3d.com/cn/2021.3/Manual/class-AudioClip.html">面板参数解释</a></p><h2 id="视频-Video"><a href="#视频-Video" class="headerlink" title="视频 (Video)"></a>视频 (Video)</h2><p>视频文件可以用于过场动画或 UI 元素，例如.mp4 或.webm 格式。<a href="https://docs.unity3d.com/cn/2021.3/Manual/class-VideoClip.html">视频参数解释</a>.</p><p>使用 VideoPlayer 组件控制播放视频，<a href="https://docs.unity3d.com/cn/2021.3/Manual/class-VideoPlayer.html">组件参数解释</a></p><h2 id="脚本-Scripts"><a href="#脚本-Scripts" class="headerlink" title="脚本 (Scripts)"></a>脚本 (Scripts)</h2><p>C#或 JavaScript 编写的代码文件，用于控制游戏逻辑和行为。</p><h2 id="材质-Materials"><a href="#材质-Materials" class="headerlink" title="材质 (Materials)"></a>材质 (Materials)</h2><p>包含着色器设置和纹理引用，用于渲染物体表面。</p><h2 id="动画-Animations"><a href="#动画-Animations" class="headerlink" title="动画 (Animations)"></a>动画 (Animations)</h2><p>通过 Unity 的动画系统创建的动画剪辑，用于角色或对象的动作。<br><a href="https://docs.unity3d.com/cn/2021.3/Manual/class-AnimationClip.html">参数详解</a></p><h2 id="预制件-Prefabs"><a href="#预制件-Prefabs" class="headerlink" title="预制件 (Prefabs)"></a>预制件 (Prefabs)</h2><p>预先设置好的游戏对象实例，可以多次重复使用。</p><h2 id="粒子系统-Particle-Systems"><a href="#粒子系统-Particle-Systems" class="headerlink" title="粒子系统 (Particle Systems)"></a>粒子系统 (Particle Systems)</h2><p>用于创建动态效果如火焰、烟雾或火花。<br><a href="https://docs.unity3d.com/cn/2021.3/Manual/ParticleSystemModules.html">粒子系统模块</a></p><h2 id="网格-Meshes"><a href="#网格-Meshes" class="headerlink" title="网格 (Meshes)"></a>网格 (Meshes)</h2><p>定义模型的几何形状，通常与模型文件一起导入。</p><h2 id="着色器-Shaders"><a href="#着色器-Shaders" class="headerlink" title="着色器 (Shaders)"></a>着色器 (Shaders)</h2><p>控制如何渲染物体的光照和颜色，可以是内置的也可以是自定义的。</p><h2 id="字体-Fonts"><a href="#字体-Fonts" class="headerlink" title="字体 (Fonts)"></a>字体 (Fonts)</h2><p>用于 UI 文本显示，可以是位图或动态字体。<br><a href="https://docs.unity3d.com/cn/2021.3/Manual/class-Font.html">Font assets</a></p><h2 id="场景-Scenes"><a href="#场景-Scenes" class="headerlink" title="场景 (Scenes)"></a>场景 (Scenes)</h2><p>游戏世界的布局，包含游戏对象和相机。</p><h2 id="物理材质-Physics-Materials"><a href="#物理材质-Physics-Materials" class="headerlink" title="物理材质 (Physics Materials)"></a>物理材质 (Physics Materials)</h2><p>控制物理碰撞的摩擦力和弹力。<br><a href="https://docs.unity3d.com/cn/2021.3/Manual/class-PhysicMaterial.html">Physic Mat</a></p><h2 id="天空盒-Skyboxes"><a href="#天空盒-Skyboxes" class="headerlink" title="天空盒 (Skyboxes)"></a>天空盒 (Skyboxes)</h2><p>通常是六面立方体贴图，用于模拟远处的天空和环境。</p><h2 id="光照贴图-Lightmaps"><a href="#光照贴图-Lightmaps" class="headerlink" title="光照贴图 (Lightmaps)"></a>光照贴图 (Lightmaps)</h2><p>预计算的光照数据，用于提高渲染效率。</p><h2 id="动画控制器-Animator-Controllers"><a href="#动画控制器-Animator-Controllers" class="headerlink" title="动画控制器 (Animator Controllers)"></a>动画控制器 (Animator Controllers)</h2><p>用于管理复杂的动画状态和过渡。</p><h2 id="输入映射-Input-Axes"><a href="#输入映射-Input-Axes" class="headerlink" title="输入映射 (Input Axes)"></a>输入映射 (Input Axes)</h2><p>定义玩家输入的映射，如移动和跳跃。</p><h2 id="资源文件-Resource-Files"><a href="#资源文件-Resource-Files" class="headerlink" title="资源文件 (Resource Files)"></a>资源文件 (Resource Files)</h2><p>可以是 JSON、XML 或其他格式的数据文件，用于存储游戏数据。</p><h1 id="AssetBundle-打包和加载"><a href="#AssetBundle-打包和加载" class="headerlink" title="AssetBundle 打包和加载"></a>AssetBundle 打包和加载</h1><p>AssetBundles 是 Unity 引擎中用于资源管理的一种机制，主要用于在运行时从外部加载游戏资源，如纹理、模型、音频文件等。这种机制允许开发者将游戏资源打包成独立的文件，然后在游戏运行时按需下载和加载这些文件，从而实现资源的动态管理和优化。</p><h2 id="分配资源"><a href="#分配资源" class="headerlink" title="分配资源"></a>分配资源</h2><p>选择可打包资源，即如纹理、模型、音频文件、预制件、场景等，进入 inspector 窗口<br>在 inspector 窗口中选择资源分配的 AssetBundle 包名，可以以文件夹形式</p><p><img src="/../img/UnityInspector/AssetBundle.png" alt="AssetBundle"></p><p>第一个参数为包名，第二个参数为后缀</p><h2 id="构建-AssetBundle"><a href="#构建-AssetBundle" class="headerlink" title="构建 AssetBundle"></a>构建 AssetBundle</h2><p>在 Assets 文件夹中创建一个名为 <strong>Editor 的文件夹</strong>，并将包含以下内容的脚本放在该文件夹中：</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreateAssetBundles</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;Assets/Build AssetBundles&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BuildAllAssetBundles</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> assetBundleDirectory = <span class="string">&quot;Assets/AssetBundles&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!Directory.Exists(assetBundleDirectory))</span><br><span class="line">        &#123;</span><br><span class="line">            Directory.CreateDirectory(assetBundleDirectory);</span><br><span class="line">        &#125;</span><br><span class="line">        BuildPipeline.BuildAssetBundles(assetBundleDirectory,</span><br><span class="line">                                        BuildAssetBundleOptions.None,</span><br><span class="line">                                        BuildTarget.StandaloneWindows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BuildAssetBundles()参数解释：</p><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">outputPath</td><td align="left">输出路径</td></tr><tr><td align="left">assetBundleOptions</td><td align="left">构建选项</td></tr><tr><td align="left">BuildTarget</td><td align="left">目标平台</td></tr><tr><td align="left">常用构建选项：</td><td align="left"></td></tr></tbody></table><ol><li>None:默认构建选项，使用 LZMA 压缩方式</li><li>UncompressedAssetBundle:不压缩</li><li>ChunkBasedCompression: 按块级压缩,即使用 LZ4 压缩方式</li></ol><h2 id="加载-AssetBundle"><a href="#加载-AssetBundle" class="headerlink" title="加载 AssetBundle"></a>加载 AssetBundle</h2><p>在使用 AB 包中的资源时，需要先将 AB 包加载出来，以下包含三种常用的加载方式，可以选择使用同步加载或者异步加载，异步加载需要使用协程</p><ol><li>AssetBundle.LoadFromMemoryAsync</li></ol><p>此函数采用包含 AssetBundle 数据的字节数组。也可以根据需要传递 CRC 值。如果捆绑包采用的是 LZMA 压缩方式，将在加载时解压缩 AssetBundle。LZ4 压缩包则会以压缩状态加载。</p><p>以下是如何使用此方法的一个示例：</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IEnumerator <span class="title">LoadFromMemoryAsync</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        AssetBundleCreateRequest createRequest = AssetBundle.LoadFromMemoryAsync(File.ReadAllBytes(path)); <span class="comment">//这里是读的文件的字节信息</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> createRequest;</span><br><span class="line">        AssetBundle bundle = createRequest.assetBundle;</span><br><span class="line">        <span class="keyword">var</span> prefab = bundle.LoadAsset&lt;GameObject&gt;(<span class="string">&quot;MyObject&quot;</span>);</span><br><span class="line">        Instantiate(prefab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>AssetBundle.LoadFromFile</li></ol><p>从本地存储中加载未压缩的捆绑包时，此 API 非常高效。如果捆绑包未压缩或采用了数据块 (LZ4) 压缩方式，LoadFromFile 将直接从磁盘加载捆绑包。使用此方法加载完全压缩的 (LZMA) 捆绑包将首先解压缩捆绑包，然后再将其加载到内存中。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> myLoadedAssetBundle = AssetBundle ab = AssetBundle.LoadFromFile(<span class="string">&quot;AssetBundles/PC/tt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (myLoadedAssetBundle == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Failed to load AssetBundle!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> prefab = myLoadedAssetBundle.LoadAsset&lt;GameObject&gt;(<span class="string">&quot;MyObject&quot;</span>);</span><br><span class="line">        Instantiate(prefab);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>异步加载示例</strong></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function">IEnumerator <span class="title">LoadAssetBundlesAsync</span>(<span class="params"><span class="built_in">string</span> abName,<span class="built_in">string</span> resName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        AssetBundleCreateRequest abcr = AssetBundle.LoadFromFileAsync(<span class="string">&quot;AssetBundles/PC/&quot;</span> + abName);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> abcr;</span><br><span class="line">        AssetBundleRequest abr = abcr.assetBundle.LoadAssetAsync(resName, <span class="keyword">typeof</span>(Sprite));</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> abr;</span><br><span class="line">        image.sprite = abr.asset <span class="keyword">as</span> Sprite;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>UnityWebRequestAssetBundle 的 DownloadHandlerAssetBundle （Unity 5.3 或更高版本）</li></ol><p>UnityWebRequestAssetBundle 有一个特定 API 调用来处理 AssetBundle。首先，需要使用 UnityWebRequestAssetBundle.GetAssetBundle 来创建 Web 请求。返回请求后，请将请求对象传递给 DownloadHandlerAssetBundle.GetContent(UnityWebRequestAssetBundle)。GetContent 调用将返回 AssetBundle 对象。</p><p>下载捆绑包后，还可以在 DownloadHandlerAssetBundle 类上使用 assetBundle 属性，从而以 AssetBundle.LoadFromFile 的效率加载 AssetBundle。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//加载服务器ab包</span></span><br><span class="line">        StartCoroutine(LoadAssetBundle());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IEnumerator <span class="title">LoadAssetBundle</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> uri = <span class="string">@&quot;File:///E:\God\Unity\Unity_Study_Demo\AssetBundles\PC\tt&quot;</span>;</span><br><span class="line">        UnityWebRequest requestAssetBundle = UnityWebRequestAssetBundle.GetAssetBundle(uri, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> requestAssetBundle.Send();</span><br><span class="line">        AssetBundle bundle = DownloadHandlerAssetBundle.GetContent(requestAssetBundle);</span><br><span class="line">        cube = bundle.LoadAsset&lt;GameObject&gt;(<span class="string">&quot;Cube&quot;</span>);</span><br><span class="line">        Instantiate(cube,Vector3.zero,Quaternion.identity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>依赖关系</p><p><strong>ab 包依赖关系:</strong><br>在一个 ab 包中的资源依赖其他 ab 包中的某个资源，比如 ab1 中的 model 使用了 ab2 中的 material,<br>使用时如果只加载 ab1 然后使用资源 model，会出现依赖的 material 丢失的情况<br>解决：1.依赖文件放在同一包下。2.加载 ab1 时同时加载 ab2(不用指定，ab2 加载出来后依赖它的资源会自动使用)</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 加载cube的依赖资源，加载AssetBundle清单</span></span><br><span class="line">     <span class="comment">//明确依赖的ab包</span></span><br><span class="line">     <span class="comment">//AssetBundle ab2 = AssetBundle.LoadFromFile(&quot;AssetBundles/PC/material&quot;);</span></span><br><span class="line">     <span class="comment">//问题： 一个包中的资源可能会依赖许多其他包中的资源</span></span><br><span class="line">     <span class="comment">//解决： 使用主包寻找依赖关系批量加载(主包就是构建ab包时自动生成的与文件夹名同名的包，内部记载了各包之间的关系)</span></span><br><span class="line">     <span class="comment">//依赖包的关键知识：利用主包 获取依赖信息</span></span><br><span class="line">     <span class="comment">//1.加载主包</span></span><br><span class="line">     AssetBundle abMain = AssetBundle.LoadFromFile(<span class="string">&quot;AssetBundles/PC/PC&quot;</span>);</span><br><span class="line">     <span class="comment">//2.加载主包中的固定文件</span></span><br><span class="line">     AssetBundleManifest abManifest = abMain.LoadAsset(<span class="string">&quot;AssetBundleManifest&quot;</span>, <span class="keyword">typeof</span>(AssetBundleManifest)) <span class="keyword">as</span> AssetBundleManifest;</span><br><span class="line">     <span class="comment">//3.从固定文件中获取依赖信息(名字)</span></span><br><span class="line">     <span class="built_in">string</span>[] strs = abManifest.GetAllDependencies(<span class="string">&quot;tt&quot;</span>);</span><br><span class="line">     <span class="comment">//4.加载依赖包</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strs.Length; i++)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="comment">//print(strs[i]);</span></span><br><span class="line">         AssetBundle.LoadFromFile(<span class="string">&quot;AssetBundles/PC/&quot;</span>+strs[i]);</span><br><span class="line">     &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="加载资源"><a href="#加载资源" class="headerlink" title="加载资源"></a>加载资源</h2><p>加载资源也包含同步加载和异步加载，可以加载包中的一个资源，也可以加载包中的所有资源</p><p>通用方式：</p><blockquote><p>T objectFromBundle &#x3D; bundleObject.LoadAsset<T>(assetName);<br>T objectFromBundle &#x3D; bundleObject.LoadAllAssets<T>();</p></blockquote><p>由于 Lua 中不支持泛型,使用:</p><blockquote><p>Object cube &#x3D; ab.LoadAsset(“Cube”, typeof(GameObject));<br>Object[] objects &#x3D; ab.LoadAllAssets(typeof(GameObject));</p></blockquote><p>还有一种需要资源名称,但是可能会取到 ab 包中同名的不同类型文件</p><blockquote><p>GameObject obj &#x3D; ab.LoadAsset<GameObject>(“RPGHeroHP”);<br>Object[] objects &#x3D; ab.LoadAllAssets();</p></blockquote><h2 id="卸载-AssetBundle"><a href="#卸载-AssetBundle" class="headerlink" title="卸载 AssetBundle"></a>卸载 AssetBundle</h2><p>何时加载和卸载 AssetBundle 非常重要。不正确地卸载 AssetBundle 会导致在内存中复制对象或其他不良情况，例如缺少纹理。</p><p>关于 AssetBundle 管理的最需要了解的是何时调用 AssetBundle.Unload(bool) – 或者 AssetBundle.UnloadAsync(bool) – 以及应该将 true 还是 false 传递到函数调用中。Unload 是一个非静态函数，可用于卸载 AssetBundle。此 API 会卸载正在调用的 AssetBundle 的标头信息。该参数指示是否还要卸载通过此 AssetBundle 实例化的所有对象。</p><p>通常，使用 AssetBundle.Unload(false) 不会获得理想的情况。大多数项目应该使用 AssetBundle.Unload(true) 并采用一种方法来确保对象不会重复。两种常用方法是：</p><ul><li><p>在应用程序生命周期中具有明确定义的卸载瞬态 AssetBundle 的时间点，例如在关卡之间或在加载屏幕期间。</p></li><li><p>维护单个对象的<strong>引用计数</strong>，仅当未使用所有组成对象时才卸载 AssetBundle。这允许应用程序卸载和重新加载单个对象，而无需复制内存。</p></li></ul><p>还提供一个静态方法来卸载所有 AB 包</p><blockquote><p>&#x2F;&#x2F;卸载全部 ab 包，参数为 true 时表示连同 ab 包生成的资源一起卸载，false 只卸载包，资源保留</p></blockquote><blockquote><p>AssetBundle.UnloadAllAssetBundles(true);</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="AssetBundleBrowser"><a href="#AssetBundleBrowser" class="headerlink" title="AssetBundleBrowser"></a>AssetBundleBrowser</h3><p>GitHub 上下载<a href="https://github.com/Unity-Technologies/AssetBundles-Browser">AssetBundleBrowser</a></p><p>或者在项目 PackageManager 中选择选择 Add package from git URL,输入 URL:</p><blockquote><p><a href="https://github.com/Unity-Technologies/AssetBundles-Browser.git">https://github.com/Unity-Technologies/AssetBundles-Browser.git</a></p></blockquote><p>安装成功后就可以在 Windows-&gt;AssetBundleBrowser 中打开面板<br><img src="/../img/UnityInspector/AssetBundleBrowser.png" alt="AssetBundleBrowser"></p><p>面板中可以看到以及分类好的包体资源以及相关信息<br>确认无误后就可以在 Build 面板中进行包体构建<br><img src="/../img/UnityInspector/AssetBundleBrowserBuild.png" alt="AssetBundleBrowserBuild"><br>主要参数包括构建平台,输出路径,是否清空文件夹在构建,复制到 StreamingAssets 文件夹下以及压缩方式等。更多细节可以<a href="https://docs.unity3d.com/Packages/com.unity.assetbundlebrowser@1.7/manual/index.html">官网查看</a></p><h3 id="生成的-AB-包文件"><a href="#生成的-AB-包文件" class="headerlink" title="生成的 AB 包文件"></a>生成的 AB 包文件</h3><p><img src="/../img/UnityInspector/AssetBundleFiles.png" alt="AssetBundleFiles"></p><ol><li><p><strong>AssetBundle 文件</strong></p><p>其中包含在运行时为了加载资源而需要加载的内容。<br>AssetBundle 文件是一个存档，在内部包含多个文件。此存档的结构根据它是 AssetBundle 还是场景 AssetBundle 可能会略有不同。以下是普通 AssetBundle 的结构：<br><img src="/../img/UnityInspector/AssetBundleStruct.png" alt="AssetBundleStruct"><br>场景 AssetBundle 与普通 AssetBundle 的不同之处在于，它针对场景及其内容的串流加载进行了优化。</p></li><li><p><strong>清单文件</strong></p><p>对于生成的每个包(包括附加的 Manifest bundle)，都会生成一个相关的清单文件。<br>清单文件的扩展名为.manifest，可以用任何文本编辑器打开。<br>它包含诸如循环冗余校验(CRC)数据和 bundle 的依赖项数据之类的信息。</p></li></ol><h3 id="AssetBundle-压缩方式"><a href="#AssetBundle-压缩方式" class="headerlink" title="AssetBundle 压缩方式"></a>AssetBundle 压缩方式</h3><p><strong>压缩类型：</strong></p><ol><li>LZ4：这是 Unity 默认使用的压缩方法，提供快速的压缩和解压速度，同时具有较好的压缩比。LZ4 非常适合用于游戏资源，因为它能在压缩和解压速度与压缩比率之间取得良好的平衡。使用哪个资源就解压哪个资源，读取快，内存略大。</li><li>LZMA：提供更高的压缩比率，但压缩和解压速度较慢。如果你的 AssetBundles 非常大，并且下载速度不是主要瓶颈，可以考虑使用 LZMA。使用一个资源需要解压整个数据流，读取慢，内存小。</li><li>No Compression：不使用任何压缩。虽然这会导致更大的文件大小，但在某些情况下可能更优，比如对于一些小文件或者已经高度压缩的资源（如 PNG 图像）。不用解压，读取快，内存大</li></ol><p><strong>压缩策略</strong></p><ol><li>按需压缩：并非所有的资源都需要压缩。例如，一些小的资源文件可能在压缩后的大小变化不大，甚至可能因为额外的压缩和解压开销而变慢。因此，识别哪些资源应该被压缩，哪些不应该，是很重要的。</li><li>预热压缩：在游戏启动时预加载一些关键的 AssetBundles，可以避免玩家在游戏过程中遇到长时间的加载等待。这种预加载通常使用 LZ4 压缩，因为它能够快速解压。</li></ol><h3 id="分组策略"><a href="#分组策略" class="headerlink" title="分组策略"></a>分组策略</h3><p>因为在 unity 中给一个资源配置了 AssetBundle,系统会自动将该资源依赖的其他资源附加到当前 AB 包中,只是不会表现出来.如果现在有另一个资源也依赖这个资源,打包时在这个包中也会自动添加一个依赖资源，这就导致了资源重复，从而导致浪费内存。所以需要合理的分组策略将资源打包成不同的包，比如将共同依赖的资源打包成一个独立的包，那么依赖它的包就不会自动再打包一次了。</p><p><strong>常用分组策略:</strong></p><ol><li><p>逻辑实体分组</p><p>逻辑实体分组是指根据资源所代表的项目功能部分将资源分配给 AssetBundle。这包括各种不同部分，比如用户界面、角色、环境以及在应用程序整个生命周期中可能经常出现的任何其他内容。</p></li><li><p>类型分组</p><p>根据此策略，可以将相似类型的资源（例如音频轨道或语言本地化文件）分配到单个 AssetBundle。</p></li><li><p>并发内容分组</p><p>并发内容分组是指将需要同时加载和使用的资源捆绑在一起。可以将这些类型的捆绑包用于基于关卡的游戏（其中每个关卡包含完全独特的角色、纹理、音乐等）。有时可能希望确保其中一个 AssetBundle 中的资源与该捆绑包中的其余资源同时使用。依赖于并发内容分组捆绑包中的单个资源会导致加载时间显著增加。您将被迫下载该单个资源的整个捆绑包。</p></li></ol><p>无论遵循何种策略，下面这些额外提示都有助于掌控全局：</p><ul><li>将频繁更新的对象与很少更改的对象拆分到不同的 AssetBundle 中</li><li>将可能同时加载的对象分到一组。例如模型及其纹理和动画</li><li>如果发现多个 AssetBundle 中的多个对象依赖于另一个完全不同的 AssetBundle 中的单个资源，请将依赖项移动到单独的 AssetBundle。如果多个 AssetBundle 引用其他 AssetBundle 中的同一组资源，一种有价值的做法可能是将这些依赖项拉入一个共享 AssetBundle 来减少重复。</li><li>如果不可能同时加载两组对象（例如标清资源和高清资源），请确保它们位于各自的 AssetBundle 中。</li><li>如果经常同时加载的 AssetBundle 少于 50%，可以考虑拆分 AssetBundle</li><li>考虑将多个小型的（少于 5 到 10 个资源）但经常同时加载内容的 AssetBundle 组合在一起</li><li>如果一组对象只是同一对象的不同版本，请考虑使用 AssetBundle 变体</li></ul><h3 id="安全性和完整性"><a href="#安全性和完整性" class="headerlink" title="安全性和完整性"></a>安全性和完整性</h3><ol><li>采用安全协议下载</li><li>CRC 校验和</li><li>用户生成的内容</li></ol><h1 id="Addressable-使用"><a href="#Addressable-使用" class="headerlink" title="Addressable 使用"></a>Addressable 使用</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;各类型资源以及导入面板相关参数&quot;&gt;&lt;a href=&quot;#各类型资源以及导入面板相关参数&quot; class=&quot;headerlink&quot; title=&quot;各类型资源以及导入面板相关参数&quot;&gt;&lt;/a&gt;各类型资源以及导入面板相关参数&lt;/h1&gt;&lt;p&gt;Unity 是一款强大的跨平台游戏开</summary>
      
    
    
    
    <category term="unity基础" scheme="http://example.com/categories/unity%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的博客</title>
    <link href="http://example.com/2024/07/01/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2024/07/01/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-07-01T09:15:17.000Z</published>
    <updated>2024-07-02T05:16:31.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Hexo-搭建博客"><a href="#使用-Hexo-搭建博客" class="headerlink" title="使用 Hexo 搭建博客"></a>使用 Hexo 搭建博客</h1><h2 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a>什么是 Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p><p>Git</p><h3 id="更新-Node-js"><a href="#更新-Node-js" class="headerlink" title="更新 Node.js"></a>更新 Node.js</h3><ol><li>查看当前版本<br><br>npm -v</li><li>更新到最新版<br><br>npm install npm@latest -g</li></ol><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><h4 id="打开-cmd-输入指令"><a href="#打开-cmd-输入指令" class="headerlink" title="打开 cmd 输入指令"></a>打开 cmd 输入指令</h4><blockquote><p>$ npm install -g hexo-cli</p></blockquote><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><blockquote><p>$ hexo v</p></blockquote><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><blockquote><p>$ hexo init</p></blockquote><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>1.在 <a href="https://hexo.io/themes/">主题网站</a> 选择主题并跳转到 github <br><br>2.clone <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">仓库地址</a></p><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>打开根目录下的 _config.yml,找到 theme 修改为主题文件名</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-butterfly</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">butterfly 主题个性化设置</a></p><h4 id="部署-hexo"><a href="#部署-hexo" class="headerlink" title="部署 hexo"></a>部署 hexo</h4><blockquote><p>$ hexo g</p></blockquote><h4 id="启动-hexo-本地化预览"><a href="#启动-hexo-本地化预览" class="headerlink" title="启动 hexo 本地化预览"></a>启动 hexo 本地化预览</h4><blockquote><p>$ hexo s</p></blockquote><h2 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h2><ol><li>github 创建仓库,后缀.github.io</li><li>配置 SSH 详情见 <a href="https://developer.aliyun.com/article/1218122">https://developer.aliyun.com/article/1218122</a></li><li>修改_config.yml 文件如下:</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">git@github.com:Ankk7/Ankk7.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ol start="4"><li>根目录下安装 deploy-git ，也就是部署的命令,这样才能用命令部署到 GitHub<blockquote><p>npm install hexo-deployer-git –save</p></blockquote></li><li>依次执行<blockquote><p>hexo c #清除缓存文件 db.json 和已生成的静态文件 public</p><p>hexo g #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</p><p>hexo d #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</p></blockquote></li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="更改主题后启动服务器在本地页面上显示各种信息如：extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include"><a href="#更改主题后启动服务器在本地页面上显示各种信息如：extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include" class="headerlink" title="更改主题后启动服务器在本地页面上显示各种信息如：extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include"></a>更改主题后启动服务器在本地页面上显示各种信息如：extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include</h3><p>解决办法：<br>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</p><h3 id="部署到-github-上后在-google-上无法访问，在-edge-上可以访问"><a href="#部署到-github-上后在-google-上无法访问，在-edge-上可以访问" class="headerlink" title="部署到 github 上后在 google 上无法访问，在 edge 上可以访问"></a>部署到 github 上后在 google 上无法访问，在 edge 上可以访问</h3><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a><br><a href="https://juejin.cn/post/7161634586824212488">如何更新 NodeJs 到最新版本？</a><br><a href="https://sspai.com/post/62441">hexo 本地化部署</a><br><a href="https://blog.csdn.net/qq_51714990/article/details/127267185">Hexo 更换主题后，启动页面报错</a><br><a href="https://developer.aliyun.com/article/1218122">将 hexo 部署到 GitHub 上</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-Hexo-搭建博客&quot;&gt;&lt;a href=&quot;#使用-Hexo-搭建博客&quot; class=&quot;headerlink&quot; title=&quot;使用 Hexo 搭建博客&quot;&gt;&lt;/a&gt;使用 Hexo 搭建博客&lt;/h1&gt;&lt;h2 id=&quot;什么是-Hexo&quot;&gt;&lt;a href=&quot;#什么是-H</summary>
      
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
